#include <stdio.h>
#include <locale.h>
#include <stdlib.h>
#include <time.h>


typedef struct {
    int n;
    int *vet;
}conjunto;

void mostrar_conjunto (conjunto x){
    int i;
    printf( "\t(" );
    for(i=0; i<x.n; i++){
        printf( "\t%d", x.vet[i] );
    }
    printf( "\t)\n" );
}

int main(){
    setlocale( LC_ALL, "portuguese");
    srand(time(NULL));

    conjunto conj[2];
    int i, cont = 0, j, aux = 0;
    int op;
    int maior;
    int vezes_sorteio;

    printf( "______________________________________" );
    printf( "\n\n||PROGRAMA MANIPULADOR DE CONJUNTOS!||" );
    printf( "\n______________________________________\n\n\n" );

    do{
        printf( " -----------------------------------\n" );
        printf( "|1-Ler um conjunto(limite 2)        |\n|2-Escrever ele na tela             |\n" );
        printf( "|3-Criar um conjunto aleatóriamente |\n|4-União de dois conjuntos          |\n" );
        printf( "|5-Intersecção de dois conjuntos    |\n|6-Diferença de dois conjuntos      |\n" );
        printf( "|0-Fim                              |\n" );
        printf( " -----------------------------------\n" );
        printf( "\nAguardando opção do usuário..." );
        scanf( "%d", &op );
        if( op < 0 || op > 6 ){
            printf( "\n*******************************************" );
            printf( "\nPor favor, insira uma opção entre 0 e 6!!!\n" );
            printf( "*******************************************\n\n" );
        }

        switch( op ){
            case 1 :
                if(cont == 2) break;

                printf( "Digite o valor do tamanho do vetor: " );
                scanf("%d", &conj[cont].n);
                conj[cont].vet = malloc(conj[cont].n * sizeof(int));

                for(i=0; i<conj[cont].n; i++){
                    printf( "Insira o valor do elemento do conjunto: " );
                    scanf( "%d", &conj[cont].vet[i] );
                }
                cont++;

                break;
            case 2 :
                for(i=0; i<cont; i++){
                    printf("\nConjunto %d:", i+1);
                    mostrar_conjunto( conj[i] );
                }

                break;
            case 3 :
                if(cont == 2) break;

                conj[cont].n = rand() % 10 + 1;
                conj[cont].vet = malloc(conj[cont].n * sizeof(int));

                for(i=0; i<conj[cont].n; i++){
                    conj[cont].vet[i] = rand() % 20+1;
                }

                for(i=0; i<conj[cont].n; i++){
                    for(j=0; j<conj[cont].n; j++){
                       do{
                            if( i == j ) break;
                            if(conj[cont].vet[i] == conj[cont].vet[j]){
                                conj[cont].vet[j] = rand() % 20+1;
                            }
                        }while(conj[cont].vet[i] == conj[cont].vet[j] );
                    }
                }
                    cont++;

                break;
            case 4 :
                aux = 0;
                printf( "\nConjunto união:\t(" );

                for(i=0; i<conj[0].n; i++){
                    printf( "\t%d",conj[0].vet[i] );
                }
                for(i=0; i<conj[1].n; i++){
                    for(j=0; j<conj[0].n; j++){
                        if(conj[1].vet[i] == conj[0].vet[j]) aux++;
                    }
                    if(aux == 0) printf( "\t%d",conj[1].vet[i] );
                    aux=0;
                }
                printf( "\t)\n" );

                break;
            case 5 :
                printf( "\nConjunto intersecção:\t(" );

                for(i=0; i<conj[0].n; i++){
                    for(j=0; j<conj[1].n; j++){
                        if(conj[0].vet[i] == conj[1].vet[j]){
                            printf( "\t%d",conj[0].vet[i] );
                        }
                    }
                }
                printf( "\t)\n" );

                break;
            case 6 :
                aux=0;
                printf( "\nConjunto diferença:\t(" );

                for(i=0; i<conj[0].n; i++){
                    for(j=0; j<conj[1].n; j++){
                        if(conj[0].vet[i] != conj[1].vet[j]){
                            aux++;
                        }else aux--;
                    }
                    if(aux == conj[1].n) printf( "\t%d", conj[0].vet[i]);
                    aux=0;
                }

                for(i=0; i<conj[1].n; i++){
                    for(j=0; j<conj[0].n; j++){
                        if(conj[1].vet[i] != conj[0].vet[j]){
                            aux++;
                        }else aux--;
                    }
                    if(aux == conj[0].n) printf( "\t%d", conj[1].vet[i]);
                    aux=0;
                }
                printf( "\t)\n" );

                break;
        }
    }while(op != 0);
}
